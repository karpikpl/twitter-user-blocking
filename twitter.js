/*jshint esversion: 6, node: true*/
'use strict';
// note: app is no longer maintained
const twitterAPI = require('node-twitter-api');

// list of users to block (easiest way to get them - get someone elses blocked user list CVS or generate it yourself using the API)
const users = [
  278255531,
  540195915,
  29547402,
  37341514,
  25917062,
  1411431132,
  1606960399,
  177102010,
  178074005,
  431146686,
  1108133629,
  33015155,
  26087371,
  231354142,
  5347642,
  1605095652,
  196497284,
  25402852,
  37002399,
  249850344,
  483921411,
  1466390108,
  193914302,
  24075028,
  1584321121,
  265520824,
  755907036,
  1006259420,
  164833525,
  1493957184,
  233872189,
  240751610,
  60504530,
  330288872,
  41400882,
  305365843,
  1524091339,
  1596646788,
  222869630,
  19297437,
  1600919216,
  24067286,
  1582694929,
  111022445,
  67620081,
  1093475623,
  1600192176,
  29755508,
  948642738,
  340264924,
  400945518,
  82500164,
  468833749,
  38514487,
  428496608,
  322024752,
  238921149,
  1280911844,
  882794293,
  305600783,
  769938338,
  1580134946,
  378222973,
  420594258,
  45205220,
  1588912080,
  379666695,
  740177766,
  68091221,
  307742656,
  417069554,
  1525910276,
  1390749386,
  19024268,
  17409629,
  33590001,
  278096906,
  67314878,
  1413598004,
  109605302,
  1186879477,
  995830680,
  1453659752,
  110861482,
  947654023,
  1575189144,
  1424278122,
  441478843,
  224744882,
  527773466,
  254999094,
  33378092,
  1559084562,
  876333271,
  294335015,
  1576895563,
  935381941,
  35732504,
  502084587,
  605279442,
  67421006,
  418863856,
  1574736103,
  115244777,
  191453668,
  1538114407,
  566517714,
  576348125,
  442992903,
  99943864,
  14981605,
  1162250544,
  19869563,
  634076792,
  152959457,
  278640663,
  584811740,
  1270001353,
  122587063,
  1256307648,
  447998254,
  437386158,
  800230220,
  1036578944,
  729085189,
  1093134697,
  24227819,
  367623896,
  36982750,
  266557251,
  320579595,
  115429360,
  495038122,
  182066647,
  377019573,
  1391560124,
  395264848,
  249563584,
  627972070,
  732730928,
  622323907,
  64999625,
  1454312474,
  325585553,
  21205681,
  135645931,
  740855131,
  126388740,
  117216619,
  39922782,
  334297027,
  746471773,
  57652284,
  129827315,
  1467313405,
  527466557,
  23188181,
  14652207,
  1119112285,
  369901910,
  82721258,
  254128442,
  1007259798,
  272634255,
  19383832,
  1551538800,
  1529423803,
  295107502,
  976558116,
  412348433,
  619152137,
  9685612,
  49835809,
  127614162,
  144548374,
  1484216306,
  349431681,
  1206351698,
  486048874,
  434632046,
  1064752471,
  59983585,
  276581304,
  1537999184,
  1533325418,
  1546849502,
  604025536,
  437072302,
  18844757,
  181060862,
  239933111,
  19928398,
  241732182,
  1544175438,
  513102464,
  14876461,
  440105953,
  32827526,
  280549339,
  46895477,
  1541496116,
  1542883200,
  497300307,
  1347882367,
  283153969,
  25039038,
  28033417,
  320169514,
  55351351,
  326450140,
  90999752,
  55312653,
  39077838,
  241569006,
  61010640,
  343791862,
  95458356,
  55928951,
  1350608714,
  235586082,
  221959819,
  88890023,
  127080370,
  25150827,
  77701621,
  25688061,
  294339013,
  375509170,
  1522330207,
  296994629,
  1197280818,
  1325887424,
  143148042,
  20566864,
  539773563,
  433061134,
  27915028,
  1327673990,
  19006894,
  534691041,
  991120512,
  71078349,
  224386452,
  322919992,
  49420494,
  25993004,
  46440103,
  1328901000,
  17613144,
  812613596,
  281042474,
  375728758,
  20413022,
  50995254,
  1370793218,
  82486359,
  168167332,
  23397963,
  403526767,
  1394982458,
  546259124,
  99220385,
  1097295883,
  533487714,
  57193404,
  85306789,
  122036251,
  1444113414,
  815992824,
  1198435315,
  302774421,
  132580412,
  133644068,
  262939859,
  103348944,
  14749606,
  16665197,
  1749311,
  15649735,
  102375372,
  27850665,
  46130870,
  5325152,
  7665302,
  14454642,
  11322372,
  19351907,
  9617282,
  14049192,
  55004348,
  45515619
];

// In order to get consumerKey, consumerSecret, accessToken and accessTokenSecret go to https://apps.twitter.com
// 1. Create a new app
// 2. Go to 'Keys and Access Tokens'
// 3. Generate My Access Token and Token Secret

const twitter = new twitterAPI({
  consumerKey: '<See comment above>',
  consumerSecret: '<See comment above>',
  callback: 'oob'
});

const accessToken = '<See comment above>';
const accessTokenSecret = '<See comment above>';

twitter.verifyCredentials(accessToken, accessTokenSecret, {}, function(error, data, response) {
  if (error) {
    //something was wrong with either accessToken or accessTokenSecret
    //start over with Step 1
  } else {
    //accessToken and accessTokenSecret can now be used to make api-calls (not yet implemented)
    //data contains the user-data described in the official Twitter-API-docs
    //you could e.g. display his screen_name
    console.log(`Everything worked! Credentials OK ${data["screen_name"]}`);
  }
});

users.forEach(u => twitter.blocks('create', {
  user_id: u
}, accessToken, accessTokenSecret, (err, data, response) => {
  if (err) {
    return console.error(err);
  }
  console.log(`Blocked user @${data.screen_name}`);
}));
